{"version":3,"sources":["components/content/MessageCar/img/teacher_avatar.png","components/content/MessageCar/index.jsx","../node_modules/nanoid/index.browser.js","page/Set/Class/Detail/Studens/index.jsx"],"names":["MessgeCar","name","this","props","className","src","teacheravatar","alt","adm","undefined","subject","PureComponent","nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Studens","state","students","hasError","console","log","token","PubSub","subscribe","_","data","setState","unsubscribe","map","studentsobj","error"],"mappings":"wNAAe,MAA0B,2CCKpBA,G,6KACT,IACAC,EAASC,KAAKC,MAAdF,KACR,OACE,8BAEE,sBAAKG,UAAU,iBAAf,UACE,qBAAKC,IAAKC,EAAeC,IAAI,KAC7B,qBAAKH,UAAU,aAAf,SAA4B,4BAAIH,MAChC,sBAAKG,UAAU,gBAAf,UAGIF,KAAKC,MAAMK,IAAM,qBAAKJ,UAAU,OAAf,SAAsB,qDAAmB,QAGnCK,IAAvBP,KAAKC,MAAMO,QAAwB,GAAK,qBAAKN,UAAU,WAAf,SAA0B,4BAAIF,KAAKC,MAAMO,eAIrF,sBAAKN,UAAU,mBAAf,UAAoCH,EAApC,uC,GAnB6BU,mB,kEC6BvC,IA2CIC,EAAS,WAKX,IAL0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAG3CA,KAAQ,CAMb,IAAIM,EAAqB,GAAdJ,EAAMF,GAGfC,GAFEK,EAAO,GAEHA,EAAKC,SAAS,IACXD,EAAO,IAETA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAOL,I,yKC7FYQ,E,4MAEnBC,MAAQ,CACNC,SAAU,GACVC,SAAU,I,kEASVC,QAAQC,IAAI,2K,0CAGO,IAAD,OAClBzB,KAAK0B,MAAQC,IAAOC,UAAU,eAAe,SAACC,EAAGC,GAC/C,EAAKC,SAAS,CAAET,SAAUQ,S,6CAI5BH,IAAOK,YAAYhC,KAAK0B,S,+BAGhB,IAAD,OACCJ,EAAatB,KAAKqB,MAAlBC,SACR,OACE,qBAAKpB,UAAU,uBAAf,SAEIoB,EAASW,KAAI,SAAAC,GAAW,OACtB,EAAKb,MAAME,SAAW,0GAAwB,cAAC,IAAD,eAAgCW,GAAfxB,uB,gDAvBzCyB,GAC9B,MAAO,CAAEZ,SAAUY,O,GATc1B","file":"static/js/7.2e9abd60.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/teacher_avatar.d9220460.png\";","import React, { PureComponent } from 'react'\r\n\r\nimport teacheravatar from \"./img/teacher_avatar.png\"\r\n\r\nimport './css/index.css'\r\nexport default class MessgeCar extends PureComponent {\r\n  render() {\r\n    const { name } = this.props\r\n    return (\r\n      <div>\r\n        {/* 科任老师 */}\r\n        <div className=\"detail-message\">\r\n          <img src={teacheravatar} alt=\"\" />\r\n          <div className='teachename'><i>{name}</i></div>\r\n          <div className='subjects-node'  >\r\n\r\n            {\r\n              this.props.adm ? <div className='admi'><i>管理员</i></div> : []\r\n            }\r\n            {\r\n              this.props.subject === undefined ? [] : <div className='subjects'><i>{this.props.subject}</i></div>\r\n            }\r\n\r\n          </div>\r\n          <div className='personal-profile' >{name}个人简介</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nimport { urlAlphabet } from './url-alphabet/index.js'\n\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in the production bundle.\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID. If you use Expo, install `expo-random` ' +\n        'and use `nanoid/async`.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\n\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\n\nlet customRandom = (alphabet, size, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n  let step = -~((1.6 * mask * size) / alphabet.length)\n\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let j = step\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import React, { PureComponent } from 'react'\r\nimport { nanoid } from 'nanoid'\r\n\r\nimport PubSub from 'pubsub-js'\r\n\r\nimport MessageCar from '../../../../../components/content/MessageCar'\r\n\r\n\r\nexport default class Studens extends PureComponent {\r\n\r\n  state = {\r\n    students: [],\r\n    hasError: ''\r\n  }\r\n\r\n  //当子组件出现报错时候，会触发getDerivedStateFromError调用，并携带错误信息\r\n  static getDerivedStateFromError(error) {\r\n    return { hasError: error }\r\n  }\r\n\r\n  componentDidCatch() {\r\n    console.log('此处统计错误，反馈给服务器，用于通知编码人员进行bug的解决');\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.token = PubSub.subscribe('pubStudents', (_, data) => {\r\n      this.setState({ students: data })\r\n    })\r\n  }\r\n  componentWillUnmount() {\r\n    PubSub.unsubscribe(this.token)\r\n  }\r\n\r\n  render() {\r\n    const { students } = this.state\r\n    return (\r\n      <div className='class-detail-message'>\r\n        {\r\n          students.map(studentsobj =>\r\n            this.state.hasError ? <h2>当前网络不稳定，稍后再试</h2> : <MessageCar key={nanoid()}  {...studentsobj} ></MessageCar>\r\n          )\r\n        }\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"],"sourceRoot":""}