{"ast":null,"code":"import axios from'axios';// {//config 的参数\n//   //请求类型\n//   method: 'POST',\n//     //URL\n//   url: 'http://localhost:3001',\n//       //设置请求体\n//   data: {\n//     title: \"今天天气不错, 还挺风和日丽的\",\n//       author: \"张三\"\n//   }\nexport function request(config){// 1.创建axios的实例对象\nvar instance=axios.create({baseURL:'http://localhost:5000',timeout:5000});// 2.axios 的拦截器\n// 2.1.请求拦截的作用\ninstance.interceptors.request.use(function(config){// 拦截之后必须将结果返回\nreturn config;},function(err){console.log(err);});// 2.2.响应拦截\ninstance.interceptors.response.use(function(res){// console.log(res);\n// 只需要将data放回即可 \nreturn res.data;},function(err){console.log(err);});// 3.发送真正的网络请求\nreturn instance(config);//本身(源码)就是一个 promise 所以可以用then catch\n}","map":{"version":3,"sources":["C:/Users/郭晓飞/Desktop/Edu/Education_nformation_platform/src/network/request.js"],"names":["axios","request","config","instance","create","baseURL","timeout","interceptors","use","err","console","log","response","res","data"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAO,SAASC,CAAAA,OAAT,CAAiBC,MAAjB,CAAyB,CAE9B;AACA,GAAMC,CAAAA,QAAQ,CAAGH,KAAK,CAACI,MAAN,CAAa,CAC5BC,OAAO,CAAE,uBADmB,CAE5BC,OAAO,CAAE,IAFmB,CAAb,CAAjB,CAKA;AACA;AACAH,QAAQ,CAACI,YAAT,CAAsBN,OAAtB,CAA8BO,GAA9B,CACE,SAAAN,MAAM,CAAI,CACR;AACA,MAAOA,CAAAA,MAAP,CACD,CAJH,CAKE,SAAAO,GAAG,CAAI,CACLC,OAAO,CAACC,GAAR,CAAYF,GAAZ,EACD,CAPH,EASA;AACAN,QAAQ,CAACI,YAAT,CAAsBK,QAAtB,CAA+BJ,GAA/B,CACE,SAAAK,GAAG,CAAI,CACL;AACA;AACA,MAAOA,CAAAA,GAAG,CAACC,IAAX,CACD,CALH,CAME,SAAAL,GAAG,CAAI,CACLC,OAAO,CAACC,GAAR,CAAYF,GAAZ,EACD,CARH,EAUA;AACA,MAAON,CAAAA,QAAQ,CAACD,MAAD,CAAf,CAAuB;AAGxB","sourcesContent":["import axios from 'axios'\r\n\r\n\r\n// {//config 的参数\r\n//   //请求类型\r\n//   method: 'POST',\r\n//     //URL\r\n//   url: 'http://localhost:3001',\r\n//       //设置请求体\r\n//   data: {\r\n//     title: \"今天天气不错, 还挺风和日丽的\",\r\n//       author: \"张三\"\r\n//   }\r\nexport function request(config) {\r\n\r\n  // 1.创建axios的实例对象\r\n  const instance = axios.create({\r\n    baseURL: 'http://localhost:5000',\r\n    timeout: 5000\r\n  })\r\n\r\n  // 2.axios 的拦截器\r\n  // 2.1.请求拦截的作用\r\n  instance.interceptors.request.use(\r\n    config => {\r\n      // 拦截之后必须将结果返回\r\n      return config\r\n    },\r\n    err => {\r\n      console.log(err);\r\n    })\r\n\r\n  // 2.2.响应拦截\r\n  instance.interceptors.response.use(\r\n    res => {\r\n      // console.log(res);\r\n      // 只需要将data放回即可 \r\n      return res.data\r\n    },\r\n    err => {\r\n      console.log(err);\r\n    })\r\n\r\n  // 3.发送真正的网络请求\r\n  return instance(config)//本身(源码)就是一个 promise 所以可以用then catch\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}